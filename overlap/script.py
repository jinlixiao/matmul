import subprocess
import re
import matplotlib.pyplot as plt


# def extract_times(output):
#     """Extracts time values from the command output."""
#     times = []
#     for line in output.split('\n'):
#         match = re.search(r"Time for tiled matrix multiplication: ([\d.]+) seconds", line)
#         if match:
#             times.append(float(match.group(1)))
#     return times

# times_for_tile_sizes = {}

# for tile_size in [1, 2, 4, 8, 16, 32]:
#     print(f"Running for tile size {tile_size}")
#     # Run the command and capture its output
#     command = f"python tiled_mlp.py --num_tiles {tile_size} --num_iter 100"
#     process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)
#     stdout, stderr = process.communicate()

#     # Extract times from the output
#     times = extract_times(stdout)
#     times_for_tile_sizes[tile_size] = times

# print(times_for_tile_sizes)


times_for_tile_sizes = {1: [3.7908, 0.0021, 0.003, 0.0029, 0.0005, 0.0017, 0.0003, 0.0014, 0.0003, 0.0014, 0.0003, 0.0014, 0.0003, 0.0014, 0.0003, 0.0014, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0016, 0.0003, 0.0011, 0.0003, 0.001, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0011, 0.0003, 0.0012, 0.0003, 0.0024, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0002, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0027, 0.0003, 0.0013, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0012, 0.0003, 0.0008], 2: [3.9526, 0.002, 0.0013, 0.0012, 0.0012, 0.0013, 0.0011, 0.0012, 0.0011, 0.0012, 0.0011, 0.0011, 0.0013, 0.0009, 0.0008, 0.0008, 0.0009, 0.0008, 0.001, 0.0013, 0.0009, 0.001, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.001, 0.001, 0.0009, 0.0008, 0.0008, 0.0008, 0.0011, 0.0011, 0.0011, 0.0011, 0.0011, 0.0026, 0.001, 0.0016, 0.0011, 0.0015, 0.0011, 0.001, 0.0011, 0.001, 0.0012, 0.0011, 0.0012, 0.0011, 0.0012, 0.0012, 0.0011, 0.0028, 0.0012, 0.0011, 0.0012, 0.0012, 0.0034, 0.0005, 0.0009, 0.0009, 0.0008, 0.0012, 0.0011, 0.0011, 0.001, 0.0011, 0.0026, 0.0011, 0.001, 0.0011, 0.0008, 0.0009, 0.0008, 0.0008, 0.0345, 0.1261, 0.1211, 0.1201, 0.1201, 0.1191, 0.1188, 0.1189, 0.1198, 0.1187, 0.1196, 0.1195, 0.1191, 0.1197, 0.119, 0.119, 0.1189, 0.1187, 0.1193, 0.1188, 0.1201], 4: [4.5516, 0.0557, 0.0035, 0.0029, 0.0038, 0.0024, 0.0017, 0.003, 0.0016, 0.0017, 0.0019, 0.0016, 0.0015, 0.0008, 0.0014, 0.0015, 0.0015, 0.0017, 0.0033, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015, 0.0015, 0.0016, 0.0015, 0.0015, 0.0015, 0.0032, 0.0018, 0.0018, 0.0017, 0.0017, 0.0018, 0.0014, 0.0014, 0.0014, 0.0015, 0.002, 0.0768, 0.1143, 0.1129, 0.1149, 0.1139, 0.1146, 0.1149, 0.1138, 0.1127, 0.1128, 0.1144, 0.1133, 0.1115, 0.1142, 0.1125, 0.1119, 0.1121, 0.1134, 0.1137, 0.113, 0.1131, 0.112, 0.1139, 0.1137, 0.1123, 0.1118, 0.1135, 0.1128, 0.1129, 0.1127, 0.114, 0.1135, 0.1116, 0.113, 0.1141, 0.1126, 0.1127, 0.1121, 0.1121, 0.1116, 0.1116, 0.1118, 0.1133, 0.1127, 0.1111, 0.1137, 0.1135, 0.1131, 0.1126, 0.1142, 0.1128, 0.1129, 0.113, 0.1121, 0.1117, 0.1144, 0.1126, 0.1133], 8: [5.2395, 0.1654, 0.0081, 0.0035, 0.0037, 0.0048, 0.0028, 0.0049, 0.0027, 0.0026, 0.0026, 0.0038, 0.0027, 0.0044, 0.0027, 0.0027, 0.0027, 0.0041, 0.003, 0.0536, 0.113, 0.1112, 0.113, 0.1126, 0.1127, 0.1117, 0.1101, 0.1131, 0.1132, 0.111, 0.1116, 0.1107, 0.1095, 0.111, 0.1122, 0.1121, 0.11, 0.1114, 0.1116, 0.1119, 0.1108, 0.11, 0.1118, 0.111, 0.1123, 0.1104, 0.1107, 0.111, 0.1107, 0.1099, 0.1111, 0.1123, 0.1103, 0.1122, 0.1124, 0.1119, 0.111, 0.1109, 0.1109, 0.11, 0.1112, 0.1118, 0.1112, 0.1097, 0.1104, 0.111, 0.1111, 0.1125, 0.1109, 0.1121, 0.11, 0.1107, 0.1103, 0.1102, 0.1128, 0.1099, 0.11, 0.1095, 0.1118, 0.1107, 0.1121, 0.1111, 0.1103, 0.1137, 0.1092, 0.1113, 0.1126, 0.11, 0.1107, 0.112, 0.1116, 0.1097, 0.1122, 0.1101, 0.1109, 0.1123, 0.1098, 0.1118, 0.1111, 0.1114], 16: [4.9592, 0.0046, 0.0041, 0.0043, 0.0041, 0.0039, 0.0039, 0.0056, 0.004, 0.0042, 0.0041, 0.004, 0.0052, 0.0042, 0.0473, 0.1182, 0.1156, 0.1155, 0.1168, 0.1179, 0.1175, 0.1153, 0.1177, 0.1188, 0.1146, 0.1159, 0.1162, 0.1181, 0.1172, 0.1155, 0.118, 0.1146, 0.1171, 0.1169, 0.114, 0.1176, 0.1156, 0.1197, 0.1183, 0.1167, 0.1179, 0.1151, 0.1155, 0.1161, 0.1164, 0.1164, 0.1172, 0.1162, 0.115, 0.118, 0.1176, 0.1151, 0.1188, 0.1181, 0.1182, 0.1199, 0.1175, 0.1169, 0.1168, 0.1177, 0.1139, 0.1177, 0.1181, 0.1136, 0.1146, 0.1171, 0.1174, 0.1186, 0.1179, 0.1174, 0.1146, 0.115, 0.1193, 0.1163, 0.1166, 0.1197, 0.1185, 0.1164, 0.1143, 0.1163, 0.1174, 0.1143, 0.1155, 0.1147, 0.1157, 0.1165, 0.1176, 0.1174, 0.116, 0.1171, 0.116, 0.1171, 0.1168, 0.1167, 0.1176, 0.1172, 0.1184, 0.1163, 0.1149, 0.1174], 32: [5.2411, 0.0084, 0.0076, 0.0091, 0.0074, 0.0077, 0.0086, 0.075, 0.1268, 0.1303, 0.1303, 0.1326, 0.1288, 0.1301, 0.1312, 0.1305, 0.1287, 0.1299, 0.1313, 0.1289, 0.1313, 0.1311, 0.1311, 0.1306, 0.1281, 0.1296, 0.1305, 0.127, 0.1306, 0.1312, 0.1257, 0.1285, 0.1302, 0.1316, 0.1294, 0.1298, 0.1312, 0.1305, 0.1311, 0.1311, 0.1305, 0.1354, 0.1296, 0.1286, 0.1319, 0.1311, 0.1309, 0.1298, 0.1332, 0.131, 0.1321, 0.1295, 0.126, 0.1301, 0.1296, 0.132, 0.1309, 0.1286, 0.1279, 0.1279, 0.1286, 0.1269, 0.1293, 0.132, 0.1305, 0.1303, 0.1311, 0.1286, 0.1288, 0.1302, 0.1295, 0.1294, 0.1295, 0.1305, 0.1291, 0.1294, 0.1296, 0.132, 0.1292, 0.132, 0.1302, 0.1302, 0.1294, 0.1293, 0.1277, 0.1311, 0.1305, 0.1303, 0.1312, 0.1272, 0.1327, 0.1303, 0.1304, 0.1278, 0.1311, 0.1271, 0.1252, 0.1304, 0.1287, 0.1298]}

# Prepare data for plotting
tile_sizes = list(times_for_tile_sizes.keys())
times = [times_for_tile_sizes[size] for size in tile_sizes]

# Create a box-and-whisker plot
plt.figure(figsize=(10, 6))
plt.boxplot(times, labels=tile_sizes, showfliers=False)
plt.title('Box-and-Whisker Plot for Tiled Matrix Multiplication Times')
plt.xlabel('Tile Size')
plt.ylabel('Time (seconds)')
plt.grid(True)
plt.savefig('images/timing_analysis_boxplot_iter100.png')